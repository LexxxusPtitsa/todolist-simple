{"version":3,"sources":["components/TodoInput.jsx","components/TodoItem.jsx","components/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","Component","TodoItem","title","handleDelete","handleEdit","onClick","icon","faPen","faTrash","TodoList","items","clearList","map","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","selectedItem","find","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c64e66be.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TodoInput extends Component {\r\n    render() {\r\n        const {item, handleChange,handleSubmit,editItem} =this.props\r\n        return (\r\n            <div className=\"input\">\r\n                <div className=\"input__inner\">\r\n                    <div className=\"input__title\">\r\n                        <h3>Todo Input</h3>\r\n                    </div>\r\n                    <form className=\"input__form\" onSubmit={handleSubmit}>\r\n                        <input\r\n                         type=\"text\" \r\n                         className=\"input__area\" \r\n                         placeholder=\"add a todo item\"\r\n                         value={item}\r\n                         onChange={handleChange}\r\n                        />\r\n                        <button type=\"submit\" className={\r\n                            editItem ?  \"input__button input__button--green\" :\"input__button input__button--blue\"\r\n                        }>{editItem ? 'Edit Item' : \"Add Item\"}</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n           \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default class TodoItem extends Component {\r\n  render() {\r\n    const { title,handleDelete, handleEdit} = this.props;\r\n    return (\r\n      <li className=\"item\">\r\n        <h6 className=\"item__title\">{title}</h6>\r\n        <div className=\"item__icons\">\r\n          <span className=\"item__icon item__icon--edit\" onClick ={handleEdit}>\r\n            <FontAwesomeIcon icon={faPen} />\r\n          </span>\r\n          <span className=\"item__icon item__icon--delete\" onClick={handleDelete}>\r\n            <FontAwesomeIcon icon={faTrash} />\r\n          </span>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nexport default class TodoList extends Component {\r\n  render() {\r\n    const { items, clearList, handleDelete, handleEdit } = this.props;\r\n    return (\r\n      <div className=\"list\">\r\n        <h3 className=\"list__title\">Todo List</h3>\r\n        <ul className=\"list__ul\">\r\n          {items.map(item => {\r\n            return <TodoItem key={item.id} title={item.title} handleDelete={() => handleDelete(item.id)} handleEdit={() => handleEdit(item.id)}/>;\r\n          })}\r\n        </ul>\r\n        <button onClick = {clearList} type=\"button\" className=\"list__button\">\r\n          Clear list\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\nimport uuid from \"react-uuid\"\n\nclass App extends React.Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: '',\n    editItem: false\n  }\n  handleChange = (e) => {\n    this.setState({\n      item: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    };\n\n    const updatedItems = [...this.state.items, newItem];\n    this.setState({\n      items: updatedItems,\n      item: '',\n      id: uuid(),\n      editItem: false\n    })\n  }\n  clearList = () => {\n    this.setState({\n      items: []\n    })\n  }\n  handleDelete = (id) => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    this.setState({\n      items: filteredItems\n    })\n  }\n  handleEdit = id =>{\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    const selectedItem = this.state.items.find(item => item.id ===id);\n\n    this.setState({\n      items: filteredItems,\n      item: selectedItem.title,\n      id: id,\n      editItem:true\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoInput item={this.state.item} handleChange={this.handleChange} handleSubmit={this.handleSubmit}  editItem={this.state.editItem}/>\n        <TodoList items={this.state.items} clearList={this.clearList} handleDelete={this.handleDelete} handleEdit={this.handleEdit} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}